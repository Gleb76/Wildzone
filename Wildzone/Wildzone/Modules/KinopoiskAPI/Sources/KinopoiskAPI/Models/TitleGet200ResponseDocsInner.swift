//
// TitleGet200ResponseDocsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TitleGet200ResponseDocsInner: Codable, JSONEncodable, Hashable {

    public var id: Double?
    public var externalId: TitleGet200ResponseDocsInnerExternalId?
    public var name: String?
    public var alternativeName: String?
    public var enName: String?
    public var names: [TitleGet200ResponseDocsInnerNamesInner]?
    public var type: String?
    public var typeNumber: Double?
    public var year: Double?
    public var description: String?
    public var shortDescription: String?
    public var slogan: String?
    public var status: String?
    public var facts: [TitleGet200ResponseDocsInnerFactsInner]?
    public var rating: TitleGet200ResponseDocsInnerRating?
    public var votes: TitleGet200ResponseDocsInnerVotes?
    public var movieLength: Double?
    public var ratingMpaa: String?
    public var ageRating: Double?
    public var logo: TitleGet200ResponseDocsInnerLogo?
    public var poster: TitleGet200ResponseDocsInnerPoster?
    public var backdrop: TitleGet200ResponseDocsInnerPoster?
    public var videos: TitleGet200ResponseDocsInnerVideos?
    public var genres: [TitleGet200ResponseDocsInnerGenresInner]?
    public var countries: [TitleGet200ResponseDocsInnerGenresInner]?
    public var persons: [TitleGet200ResponseDocsInnerPersonsInner]?
    public var reviewInfo: TitleGet200ResponseDocsInnerReviewInfo?
    public var seasonsInfo: [TitleGet200ResponseDocsInnerSeasonsInfoInner]?
    public var budget: TitleGet200ResponseDocsInnerBudget?
    public var fees: TitleGet200ResponseDocsInnerFees?
    public var premiere: TitleGet200ResponseDocsInnerPremiere?
    public var similarMovies: [TitleGet200ResponseDocsInnerSimilarMoviesInner]?
    public var sequelsAndPrequels: [TitleGet200ResponseDocsInnerSimilarMoviesInner]?
    public var watchability: TitleGet200ResponseDocsInnerWatchability?
    public var releaseYears: [TitleGet200ResponseDocsInnerReleaseYearsInner]?
    public var top10: Double?
    public var top250: Double?
    public var ticketsOnSale: Bool?
    public var totalSeriesLength: Double?
    public var seriesLength: Double?
    public var isSeries: Bool?
    public var audience: [TitleGet200ResponseDocsInnerAudienceInner]?
    public var lists: [String]?
    public var networks: TitleGet200ResponseDocsInnerNetworks?
    public var updatedAt: String?
    public var createdAt: String?

    public init(id: Double? = nil, externalId: TitleGet200ResponseDocsInnerExternalId? = nil, name: String? = nil, alternativeName: String? = nil, enName: String? = nil, names: [TitleGet200ResponseDocsInnerNamesInner]? = nil, type: String? = nil, typeNumber: Double? = nil, year: Double? = nil, description: String? = nil, shortDescription: String? = nil, slogan: String? = nil, status: String? = nil, facts: [TitleGet200ResponseDocsInnerFactsInner]? = nil, rating: TitleGet200ResponseDocsInnerRating? = nil, votes: TitleGet200ResponseDocsInnerVotes? = nil, movieLength: Double? = nil, ratingMpaa: String? = nil, ageRating: Double? = nil, logo: TitleGet200ResponseDocsInnerLogo? = nil, poster: TitleGet200ResponseDocsInnerPoster? = nil, backdrop: TitleGet200ResponseDocsInnerPoster? = nil, videos: TitleGet200ResponseDocsInnerVideos? = nil, genres: [TitleGet200ResponseDocsInnerGenresInner]? = nil, countries: [TitleGet200ResponseDocsInnerGenresInner]? = nil, persons: [TitleGet200ResponseDocsInnerPersonsInner]? = nil, reviewInfo: TitleGet200ResponseDocsInnerReviewInfo? = nil, seasonsInfo: [TitleGet200ResponseDocsInnerSeasonsInfoInner]? = nil, budget: TitleGet200ResponseDocsInnerBudget? = nil, fees: TitleGet200ResponseDocsInnerFees? = nil, premiere: TitleGet200ResponseDocsInnerPremiere? = nil, similarMovies: [TitleGet200ResponseDocsInnerSimilarMoviesInner]? = nil, sequelsAndPrequels: [TitleGet200ResponseDocsInnerSimilarMoviesInner]? = nil, watchability: TitleGet200ResponseDocsInnerWatchability? = nil, releaseYears: [TitleGet200ResponseDocsInnerReleaseYearsInner]? = nil, top10: Double? = nil, top250: Double? = nil, ticketsOnSale: Bool? = nil, totalSeriesLength: Double? = nil, seriesLength: Double? = nil, isSeries: Bool? = nil, audience: [TitleGet200ResponseDocsInnerAudienceInner]? = nil, lists: [String]? = nil, networks: TitleGet200ResponseDocsInnerNetworks? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.externalId = externalId
        self.name = name
        self.alternativeName = alternativeName
        self.enName = enName
        self.names = names
        self.type = type
        self.typeNumber = typeNumber
        self.year = year
        self.description = description
        self.shortDescription = shortDescription
        self.slogan = slogan
        self.status = status
        self.facts = facts
        self.rating = rating
        self.votes = votes
        self.movieLength = movieLength
        self.ratingMpaa = ratingMpaa
        self.ageRating = ageRating
        self.logo = logo
        self.poster = poster
        self.backdrop = backdrop
        self.videos = videos
        self.genres = genres
        self.countries = countries
        self.persons = persons
        self.reviewInfo = reviewInfo
        self.seasonsInfo = seasonsInfo
        self.budget = budget
        self.fees = fees
        self.premiere = premiere
        self.similarMovies = similarMovies
        self.sequelsAndPrequels = sequelsAndPrequels
        self.watchability = watchability
        self.releaseYears = releaseYears
        self.top10 = top10
        self.top250 = top250
        self.ticketsOnSale = ticketsOnSale
        self.totalSeriesLength = totalSeriesLength
        self.seriesLength = seriesLength
        self.isSeries = isSeries
        self.audience = audience
        self.lists = lists
        self.networks = networks
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case externalId
        case name
        case alternativeName
        case enName
        case names
        case type
        case typeNumber
        case year
        case description
        case shortDescription
        case slogan
        case status
        case facts
        case rating
        case votes
        case movieLength
        case ratingMpaa
        case ageRating
        case logo
        case poster
        case backdrop
        case videos
        case genres
        case countries
        case persons
        case reviewInfo
        case seasonsInfo
        case budget
        case fees
        case premiere
        case similarMovies
        case sequelsAndPrequels
        case watchability
        case releaseYears
        case top10
        case top250
        case ticketsOnSale
        case totalSeriesLength
        case seriesLength
        case isSeries
        case audience
        case lists
        case networks
        case updatedAt
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(alternativeName, forKey: .alternativeName)
        try container.encodeIfPresent(enName, forKey: .enName)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeNumber, forKey: .typeNumber)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(slogan, forKey: .slogan)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(facts, forKey: .facts)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(votes, forKey: .votes)
        try container.encodeIfPresent(movieLength, forKey: .movieLength)
        try container.encodeIfPresent(ratingMpaa, forKey: .ratingMpaa)
        try container.encodeIfPresent(ageRating, forKey: .ageRating)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(poster, forKey: .poster)
        try container.encodeIfPresent(backdrop, forKey: .backdrop)
        try container.encodeIfPresent(videos, forKey: .videos)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(countries, forKey: .countries)
        try container.encodeIfPresent(persons, forKey: .persons)
        try container.encodeIfPresent(reviewInfo, forKey: .reviewInfo)
        try container.encodeIfPresent(seasonsInfo, forKey: .seasonsInfo)
        try container.encodeIfPresent(budget, forKey: .budget)
        try container.encodeIfPresent(fees, forKey: .fees)
        try container.encodeIfPresent(premiere, forKey: .premiere)
        try container.encodeIfPresent(similarMovies, forKey: .similarMovies)
        try container.encodeIfPresent(sequelsAndPrequels, forKey: .sequelsAndPrequels)
        try container.encodeIfPresent(watchability, forKey: .watchability)
        try container.encodeIfPresent(releaseYears, forKey: .releaseYears)
        try container.encodeIfPresent(top10, forKey: .top10)
        try container.encodeIfPresent(top250, forKey: .top250)
        try container.encodeIfPresent(ticketsOnSale, forKey: .ticketsOnSale)
        try container.encodeIfPresent(totalSeriesLength, forKey: .totalSeriesLength)
        try container.encodeIfPresent(seriesLength, forKey: .seriesLength)
        try container.encodeIfPresent(isSeries, forKey: .isSeries)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(lists, forKey: .lists)
        try container.encodeIfPresent(networks, forKey: .networks)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

