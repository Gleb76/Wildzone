//
// KinopoiskAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class KinopoiskAPI {
    
    // MARK: - Private Properties
    static private var apiKeys = ["1JY71X8-2YS4676-PCAGFW2-AWK9YP8", "V5SHYKM-27G4090-N6G8NBD-KCNJZH1", "ANOTHER-TOKEN-2"]
    static private var currentApiKeyIndex = 0
    
    //MARK: - Public Methods
    /**
     Этот метод вернет список фильмов которые подходят под ваш запрос.

     - Parameters:
       - query: **Поисковый запрос**. Поисковый запрос для поиска фильмов.
       - page: **Страница выборки**. Номер страницы результатов, начиная с 1 (по умолчанию 1).
       - limit: **Количество элементов на странице**. Количество результатов на страницу (по умолчанию 10).
       - apiResponseQueue: **Очередь обработки ответа**. Очередь DispatchQueue, в которой будет выполняться обработка ответа (по умолчанию OpenAPIClientAPI.apiResponseQueue).
       - completion: **Замыкание завершения**. Замыкание, которое вызывается при завершении запроса. Содержит данные ответа MovieResponse или ошибку.
     
     - Returns: **RequestTask**. Объект задачи запроса.
     */
    
    @discardableResult
    open class func searchFilmsGet(query: String, page: Int = 1, limit: Int = 10, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MovieResponse?, _ error: Error?) -> Void)) -> RequestTask {
        func executeRequest() -> RequestTask {
            return searchFilmsGetWithRequestBuilder(query: query, page: page, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(response.body, nil)
                case let .failure(error):
                    if let response = error as? HTTPURLResponse, response.statusCode == 401 {
                        nextApiKey()
                        print("Текущий ключ оказался невалидным, попробуем следующий: \(getCurrentApiKey())")
                        print(error)
                        _ = executeRequest()
                    } else {
                        print(error)
                        completion(nil, error)
                    }
                }
            }
        }
        return executeRequest()
    }
    
    /**
     Этот метод предназначен для поиска картинок которые привязаны к фильмам и сериалам

     - Parameters:
       - movieId: **Идентификатор фильма**. Уникальный идентификатор фильма для получения постеров.
       - type: **Тип постера**. Поиск картинок по типу (пример: "cover", "!cover").
       - language: **Язык**. Поиск картинок по языку (пример: "en", "!de").
       - height: **Высота постера**. Поиск картинок по высоте (пример: "1920", "360-1920").
       - width: **Ширина постера**. Поиск картинок по ширине (пример: "1080", "320-1080").
       - updatedAt: **Дата обновления**. Поиск по дате обновления в базе (пример: 01.01.2020, 01.01.2020-31.12.2020).
       - createdAt: **Дата создания**. Поиск по дате добавления в базу (пример: 01.01.2020, 01.01.2020-31.12.2020).
       - page: **Номер страницы**. Номер страницы результатов, начиная с 1.
       - limit: **Лимит результатов**. Количество результатов на страницу.
       - apiResponseQueue: **Очередь обработки ответа**. Очередь DispatchQueue, в которой будет выполняться обработка ответа (по умолчанию OpenAPIClientAPI.apiResponseQueue).
       - completion: **Замыкание завершения**. Замыкание, которое вызывается при завершении запроса. Содержит данные ответа MovieResponse или ошибку.
     
     - Returns: **RequestTask**. Объект задачи запроса.
     */
    
    @discardableResult
    open class func postersGet(movieId: String = "0", type: String = "cover", language: String = "en", height: String = "1920", width: String = "1080", updatedAt: [String] = ["01.01.2020"], createdAt: [String] = ["01.01.2020"], page: Int = 1, limit: Int = 10, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MovieResponse?, _ error: Error?) -> Void)) -> RequestTask {
        func executeRequest() -> RequestTask {
            return posterGetWithRequestBuilder(movieId: movieId, type: type, language: language, height: height, width: width, updatedAt: updatedAt, createdAt: createdAt, page: page, limit: limit).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(response.body, nil)
                case let .failure(error):
                    if let response = error as? HTTPURLResponse, response.statusCode == 401 {
                        nextApiKey()
                        print("Текущий ключ оказался невалидным, попробуем следующий: \(getCurrentApiKey())")
                        print(error)
                        _ = executeRequest()
                    } else {
                        print(error)
                        completion(nil, error)
                    }
                }
            }
        }
        return executeRequest()
    }
    
    //MARK: - Private Methods
    static private func getCurrentApiKey() -> String {
        return apiKeys[currentApiKeyIndex]
    }
    
    static private func nextApiKey() {
        currentApiKeyIndex = (currentApiKeyIndex + 1) % apiKeys.count
    }
    
    //MARK: - SearchFilmsByTitle
    private class func searchFilmsGetWithRequestBuilder(query: String, page: Int, limit: Int) -> RequestBuilder<MovieResponse> {
        let localVariablePath = "/v1.4/movie/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        
        var urlComponents = URLComponents(string: localVariableURLString)
        urlComponents?.queryItems = [
            URLQueryItem(name: "query", value: query),
            URLQueryItem(name: "page", value: String(page)),
            URLQueryItem(name: "limit", value: String(limit))
        ]
        
        let apiKey = getCurrentApiKey()
        
        let localVariableNillableHeaders: [String: Any?] = [
            "X-API-KEY": apiKey,
            "Content-Type": "application/json"
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<MovieResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (urlComponents?.string ?? localVariableURLString),
            parameters: nil,
            headers: localVariableHeaderParameters,
            requiresAuthentication: true
        )
    }
    //MARK: - DownloadPosters
    private class func posterGetWithRequestBuilder(movieId: String, type: String, language: String, height: String, width: String, updatedAt: [String], createdAt: [String], page: Int, limit: Int) -> RequestBuilder<MovieResponse> {
        let localVariablePath = "/v1.4/image"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        
        var urlComponents = URLComponents(string: localVariableURLString)
        urlComponents?.queryItems = [
            URLQueryItem(name: "movieId", value: movieId),
            URLQueryItem(name: "type", value: type),
            URLQueryItem(name: "language", value: language),
            URLQueryItem(name: "height", value: height),
            URLQueryItem(name: "width", value: width),
            URLQueryItem(name: "updatedAt", value: updatedAt.joined(separator: ",")),
            URLQueryItem(name: "createdAt", value: createdAt.joined(separator: ",")),
            URLQueryItem(name: "page", value: String(page)),
            URLQueryItem(name: "limit", value: String(limit))
        ]
        
        let apiKey = getCurrentApiKey()

        let localVariableNillableHeaders: [String: Any?] = [
            "X-API-KEY": apiKey,
            "Content-Type": "application/json"
        ]
        
        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
        
        let localVariableRequestBuilder: RequestBuilder<MovieResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()
        
        return localVariableRequestBuilder.init(
            method: "GET",
            URLString: (urlComponents?.string ?? localVariableURLString),
            parameters: nil,
            headers: localVariableHeaderParameters,
            requiresAuthentication: true
        )
    }
}
